<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MultiIO</name>
    </assembly>
    <members>
        <member name="P:MultiIO.ConduitIO.ConduitType">
            <summary>
            The type of conduits this port will attach to (and the type of elements it will interact with)
            </summary>
        </member>
        <member name="P:MultiIO.ConduitIO.CellOffset">
            <summary>
            The offset (left->right, down->up) from the building's origin. Origin begins bottom-left.
            </summary>
        </member>
        <member name="P:MultiIO.ConduitIO.IconColor">
            <summary>
            The tint that is applied to the port's icon in its relevant overlay.
            </summary>
        </member>
        <member name="P:MultiIO.ConduitIO.RequiresConnection">
            <summary>
            True if a connection to a conduit connection to this port is required for the building to operate.
            </summary>
        </member>
        <member name="P:MultiIO.ConduitIO.UseConduitUpdater">
            <summary>
            If set to false, this port will not execute any default behavior for conduit updates. Only do this if the building will implement its own behavior for conduit updates.
            </summary>
        </member>
        <member name="M:MultiIO.ConduitIO.GetConduitManager">
            <summary>
            Returns the IConduitFlow instance this port is managed by, based on its specified ConduitType.
            </summary>
            <returns>The IConduitFlow instance for this port.</returns>
        </member>
        <member name="M:MultiIO.ConduitIO.GetPortCell">
            <summary>
            Get the integer cell position of this port.
            </summary>
            <returns>The integer cell position of this port.</returns>
        </member>
        <member name="M:MultiIO.ConduitIO.GetConduitObjectLayer">
            <summary>
            Get the ObjectLayer of the conduits for the associated ConduitType of this port.
            </summary>
            <returns>The associated ObjectLayer for conduits.</returns>
        </member>
        <member name="M:MultiIO.ConduitIO.UpdateConduitExistsStatus(System.Boolean)">
            <summary>
            Update the Conduit Exists status item if necessary, as well the guid item.
            </summary>
            <param name="force">Force the checks to occur, even if the connection status has not changed.</param>
        </member>
        <member name="M:MultiIO.ConduitIO.GetNetworkManager">
            <summary>
            Get the IUtilityNetworkMgr associated with this ports Conduit Type.
            </summary>
            <returns>The associated IUtilityNetworkMgr.</returns>
        </member>
        <member name="T:MultiIO.InputPort">
            <summary>
            A single instance of an Output Port associated to a MultiOutput component. Behaves similarily to ConduitDispenser but works with the parent MultiOutput to permit multiple outputs while being highly configurable.
            </summary>
        </member>
        <member name="T:MultiIO.InputPort.WrongElementResult">
            <summary>
            Specifies what should be done when an element not matching a specified filter is encountered by the port.
            </summary>
        </member>
        <member name="F:MultiIO.InputPort.WrongElementResult.Destroy">
            <summary>
            Destroy the material being input. Not typically used.
            </summary>
        </member>
        <member name="F:MultiIO.InputPort.WrongElementResult.Dump">
            <summary>
            Dump the material out of the pipes.
            </summary>
        </member>
        <member name="F:MultiIO.InputPort.WrongElementResult.Store">
            <summary>
            Continue to store the material. Will still damage the associated building this port is attached to.
            </summary>
        </member>
        <member name="F:MultiIO.InputPort.WrongElement">
            <summary>
            Defines what should occur when the conduit provides an element that does not match StoreTag. Solid ports will always drop.
             </summary>
        </member>
        <member name="F:MultiIO.InputPort.StoreTag">
            <summary>
            A tag that defines what the input port will accept into storage.
            </summary>
        </member>
        <member name="F:MultiIO.InputPort.MaximumStore">
            <summary>
            The maximum amount in storage (in KG) before the input port stops inputting. Only counts what StoreTag is set to.
            </summary>
        </member>
        <member name="F:MultiIO.InputPort.AlwaysConsume">
            <summary>
            True if the input port should operate even when the building is not operating.
            </summary>
        </member>
        <member name="F:MultiIO.InputPort.ConsumptionRate">
            <summary>
            The maximum rate (in KG) this port can draw from conduits. If not defined, no limit.
            </summary>
        </member>
        <member name="F:MultiIO.InputPort.KeepZeroMassObject">
            <summary>
            True if the storage should keep an entry of the inputted element if it is reduced to zero.
            </summary>
        </member>
        <member name="M:MultiIO.InputPort.UpdateConduitExistsStatus(System.Boolean)">
            <summary>
            Advanced use only. Update the Conduit Exists status item if necessary, as well the guid item.
            </summary>
            <param name="force">Force the checks to occur, even if the connection status has not changed.</param>
        </member>
        <member name="T:MultiIO.MultiInput">
            <summary>
            A component that facilities adding multiple input ports to a building while also handling much of their typical logic.
            </summary>
        </member>
        <member name="M:MultiIO.MultiInput.AddInputPort(ConduitType,CellOffset,Tag,UnityEngine.Color,System.Single,System.Single,System.Boolean,MultiIO.InputPort.WrongElementResult,System.Boolean)">
            <summary>
            Adds an InputPort as a child Component to whatever building MultiInput is attached to. Behaves similar to a ConduitConsumer. This function can be used any number of times as long the ports remain valid.
            </summary>
            <param name="conduitType">The type of conduit this port should attach to.</param>
            <param name="offset">The offset (left-right, down-up) of where this port is located. Offsets begin bottom-left.</param>
            <param name="iconColor">The color the port icon will appear as.</param>
            <param name="consumptionRate">The maximum rate the input port should consume from the connected conduit.</param>
            <param name="maximumStore">The maximum amount (KG) the conduit can store into the Storage component of the building.</param>
            <param name="toStoreTag">Specifies a tag the input material must have for the port to accept it.</param>
            <param name="alwaysConsume">Whether to stop consuming from the input if the building is not operational.</param>
            <param name="wrongElementResult">What to do with a material if it does not match the specified toStoreTag param.</param>
            <param name="keepZeroMassObject">Whether or not elements with zero mass should remain displayed in storage section of the details screen.</param>
            <returns>The InputPort object that was added to the MultiInput.</returns>
        </member>
        <member name="M:MultiIO.MultiInput.AddInputPort(ConduitType,CellOffset,Tag,System.Single,System.Single,System.Boolean,MultiIO.InputPort.WrongElementResult,System.Boolean)">
            <summary>
            Adds an InputPort as a child Component to whatever building MultiInput is attached to. Behaves similar to a ConduitConsumer. This function can be used any number of times as long the ports remain valid.
            </summary>
            <param name="conduitType">The type of conduit this port should attach to.</param>
            <param name="offset">The offset (left-right, down-up) of where this port is located. Offsets begin bottom-left.</param>
            <param name="consumptionRate">The maximum rate the input port should consume from the connected conduit.</param>
            <param name="maximumStore">The maximum amount (KG) the conduit can store into the Storage component of the building.</param>
            <param name="toStoreTag">Specifies a tag the input material must have for the port to accept it.</param>
            <param name="alwaysConsume">Whether to stop consuming from the input if the building is not operational.</param>
            <param name="wrongElementResult">What to do with a material if it does not match the specified toStoreTag param.</param>
            <param name="keepZeroMassObject">Whether or not elements with zero mass should remain displayed in storage section of the details screen.</param>
            <returns>The InputPort object that was added to the MultiInput.</returns>
        </member>
        <member name="M:MultiIO.MultiInput.AddInputPortInert(ConduitType,CellOffset,UnityEngine.Color)">
            <summary>
            Creates an inert input port that does not automatically handle Conduit Update behavior. The building must define its own behavior for the input port.
            </summary>
            <param name="conduitType">The type of conduit this port should attach to.</param>
            <param name="offset">The offset (left-right, down-up) of where this port is located. Offsets begin bottom-left.</param>
            <param name="iconColor">The color the port icon will appear as.</param>
            <returns></returns>
        </member>
        <member name="M:MultiIO.MultiInput.AddInputPortInert(ConduitType,CellOffset)">
            <summary>
            Creates an inert input port that does not automatically handle Conduit Update behavior. The building must define its own behavior for the input port.
            </summary>
            <param name="conduitType">The type of conduit this port should attach to.</param>
            <param name="offset">The offset (left-right, down-up) of where this port is located. Offsets begin bottom-left.</param>
            <returns></returns>
        </member>
        <member name="M:MultiIO.MultiInput.AddPreviewInputPort(ConduitType,CellOffset,UnityEngine.Color)">
            <summary>
            For DoPostConfigurePreview and DoPostUnderConstruction, adds a port specification that can appear during building previews. Implements no port functionality and acts as a visual placeholder until the building has been created.
            </summary>
            <param name="conduitType">The type of conduit this port should attach to.</param>
            <param name="offset">The offset (left-right, down-up) of where this port is located. Offsets begin bottom-left.</param>
            <param name="iconColor">The color the port icon will appear as.</param>
            <returns>A reference to the PreviewInput port. Not typically needed.</returns>
        </member>
        <member name="P:MultiIO.MultiIO`1.PortList">
            <summary>
            A list containing all ports associated to this instance. This instance is tied as the parent GameObject to the ports.
            </summary>
        </member>
        <member name="M:MultiIO.MultiIO`1.GetPortTypes">
            <summary>
            Returns a ConduitType list with the type of all ports associated to this instance.
            </summary>
        </member>
        <member name="M:MultiIO.MultiIO`1.GetPortCells">
            <summary>
            Returns a list of all the (integer) cells for the ports associated to this instance.
            </summary>
        </member>
        <member name="M:MultiIO.MultiIO`1.GetPortAt(System.Int32)">
            <summary>
            Returns the port located at the specified cell if there is one, otherwise returns null.
            </summary>
            <param name="cell">The integer location that the cell can found at on the Grid.</param>
        </member>
        <member name="M:MultiIO.MultiOutput.AddOutputPort(ConduitType,CellOffset,UnityEngine.Color,System.Boolean,SimHashes[],System.Boolean)">
            <summary>
            Adds an OutputPort as a child Component to whatever building MultiOutput is attached to. This function can be used any number of times as long the ports remain valid. Returns a reference to the OutputPort object.
            </summary>
            <param name="conduitType">The type of conduit this port should attach to.</param>
            <param name="offset">The offset (left-right, down-up) of where this port is located. Offsets begin bottom-left.</param>
            <param name="iconColor">The color the port icon will appear as.</param>
            <param name="alwaysDispense">Whether or not this port should output from storage even if the machine is not operating.</param>
            <param name="elementFilter">If defined, will filter which elements to put through this port.</param>
            <param name="invertElementFilter">If the ElementFilter is defined, true will make the filter act as a blacklist, false will make the filter act as a whitelist.</param>
            <returns>A reference to the OutputPort that has already been attached as a child component.</returns>
        </member>
        <member name="M:MultiIO.MultiOutput.AddOutputPort(ConduitType,CellOffset,System.Boolean,SimHashes[],System.Boolean)">
            <summary>
            Adds an OutputPort as a child Component to whatever building MultiOutput is attached to. This function can be used any number of times as long the ports remain valid.
            </summary>
            <param name="conduitType">The type of conduit this port should attach to.</param>
            <param name="offset">The offset (left-right, down-up) of where this port is located. Offsets begin bottom-left.</param>
            <param name="alwaysDispense">Whether or not this port should output from storage even if the machine is not operating.</param>
            <param name="elementFilter">If defined, will filter which elements to put through this port.</param>
            <param name="invertElementFilter">If the ElementFilter is defined, true will make the filter act as a blacklist, false will make the filter act as a whitelist.</param>
            <returns>A reference to the OutputPort that has already been attached as a child component.</returns>
        </member>
        <member name="M:MultiIO.MultiOutput.AddOutputPortInert(ConduitType,CellOffset,UnityEngine.Color)">
            <summary>
            Creates an inert output port that does not automatically handle Conduit Update behavior. The building must define its own behavior for the output port.
            </summary>
            <param name="conduitType">The type of conduit this port should attach to.</param>
            <param name="offset">The offset (left-right, down-up) of where this port is located. Offsets begin bottom-left.</param>
            <param name="iconColor">The color the port icon will appear as.</param>
            <returns></returns>
        </member>
        <member name="M:MultiIO.MultiOutput.AddOutputPortInert(ConduitType,CellOffset)">
            <summary>
            Creates an inert output port that does not automatically handle Conduit Update behavior. The building must define its own behavior for the output port.
            </summary>
            <param name="conduitType">The type of conduit this port should attach to.</param>
            <param name="offset">The offset (left-right, down-up) of where this port is located. Offsets begin bottom-left.</param>
            <returns></returns>
        </member>
        <member name="M:MultiIO.MultiOutput.AddPreviewOutputPort(ConduitType,CellOffset,UnityEngine.Color)">
            <summary>
            For DoPostConfigurePreview and DoPostUnderConstruction, adds a port specification that can appear during building previews. Implements no port functionality and acts as a visual placeholder until the building has been created.
            </summary>
            <param name="conduitType">The type of conduit this port should attach to.</param>
            <param name="offset">The offset (left-right, down-up) of where this port is located. Offsets begin bottom-left.</param>
            <param name="iconColor">The color the port icon will appear as.</param>
            <returns>A reference to the PreviewOutput port. Not typically needed.</returns>
        </member>
        <member name="T:MultiIO.OutputPort">
            <summary>
            A single instance of an Output Port associated to a MultiOutput component. Behaves similarily to ConduitDispenser but works with the parent MultiOutput to permit multiple outputs while being highly configurable.
            </summary>
        </member>
        <member name="F:MultiIO.OutputPort.ElementFilter">
            <summary>
            If defined, used to determine which elements to pull from the buildings storage and out into a connected conduit.
            </summary>
        </member>
        <member name="F:MultiIO.OutputPort.InvertElementFilter">
            <summary>
            True: The ElementFilter will act as a blacklist   False: The ElementFilter will act as a whitelist
            </summary>
        </member>
        <member name="F:MultiIO.OutputPort.AlwaysDispense">
            <summary>
            <para>Whether or not this port will output if the machine is not currently operating.</para>
            </summary>
        </member>
        <member name="F:MultiIO.OutputPort.SolidOutputMax">
            <summary>Default 20f (20KG). Conveyor rails have no built in maximum.</summary>
        </member>
        <member name="P:MultiIO.OutputPort.FlowPriority">
            <summary>
            Advanced use only. Should only be changed when overriding ConduitUpdate behavior of the ports.
            </summary>
        </member>
        <member name="M:MultiIO.OutputPort.FindSuitableElement">
            <summary>
            If present, returns a PrimaryElement from storage that is suitable to be dispensed through this port.
            </summary>
            <returns>A suitable PrimaryElement for this port to dispense.</returns>
        </member>
        <member name="M:MultiIO.OutputPort.MatchesConduit(PrimaryElement)">
            <summary>
            Check the PrimaryElement to see if the element's state matches this ports ConduitType.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element's state matches the ConduitType.</returns>
        </member>
        <member name="M:MultiIO.OutputPort.MatchesFilter(SimHashes)">
            <summary>
            Check if the given element should be filtered out by the output.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element matches the filter.</returns>
        </member>
        <member name="M:MultiIO.OutputPort.UpdateConduitExistsStatus(System.Boolean)">
            <summary>
            Update the Conduit Exists status item if necessary, as well the guid item.
            </summary>
            <param name="force">Force the checks to occur, even if the connection status has not changed.</param>
        </member>
        <member name="M:MultiIO.OutputPort.UpdateConduitBlockedStatus(System.Boolean)">
            <summary>
            Advanced use only. Update the StatusItem and Operational component of the conduit.
            </summary>
            <param name="force">Force the checks to occur, even if the empty status has not changed.</param>
        </member>
    </members>
</doc>
